data:
  # train
  train:
    type: myzoneufc_reid
    name: train_data
    data_transforms:
      - type: reid_transform.batch_random_warp
        translate_prob: 0.5
        scale_prob: 0.5
        scale_sigma: 0.5
        rotate_factor: 10
      - type: to_tensor
      - type: normalize
      - type: reid_transform.generate_cls_target
      - type: reid_transform.generate_ml_masks
      - type: collect
        shared: [flip_pairs, mask_pos, mask_neg, mask_tri, size_params]
        inputs: [img]
        targets: [cls_target]
    data_loader:
      num_workers: 2
    data_params:
      mode: train
      n_samples_per_id: 4
      min_ids_per_batch: 4
      batch_size: 16
      n_classes: 16
  # train with reconstruction
  train_with_recon:
    type: myzoneufc_reid
    name: train_with_recon_data
    data_transforms:
      - type: reid_transform.batch_random_warp
        translate_prob: 0.5
        scale_prob: 0.5
        scale_sigma: 0.5
        rotate_factor: 10
      - type: to_tensor
      - type: normalize
      - type: reid_transform.generate_cls_target
      - type: reid_transform.generate_ml_masks
      - type: collect
        shared: [flip_pairs, mask_pos, mask_neg, mask_tri, size_params]
        inputs: [img]
        targets: [cls_target, mask]
    data_loader:
      num_workers: 2
    data_params:
      mode: train
      n_samples_per_id: 4
      min_ids_per_batch: 4
      batch_size: 16
      n_classes: 16
      use_mask: true
  # validation
  val:
    type: myzoneufc_reid
    name: val_data
    data_transforms:
      - type: reid_transform.batch_warp
      - type: to_tensor
      - type: normalize
      - type: collect
        shared: flip_pairs
        inputs: [img]
    data_loader:
      num_workers: 0
      batch_size: 8
    data_params:
      use_mask: true
  # validation on transfer
  val_transfer:
    type: myzoneufc_reid
    name: val_transfer_data
    data_transforms:
      - type: reid_transform.batch_warp
      - type: to_tensor
      - type: normalize
      - type: collect
        shared: flip_pairs
        inputs: [img]
    data_loader:
      num_workers: 0
      batch_size: 8
    data_params:
      use_mask: true
  # test
  test:
    type: myzoneufc_reid
    name: test_data
    data_transforms:
      - type: reid_transform.batch_warp
      - type: to_tensor
      - type: normalize
      - type: collect
        shared: flip_pairs
        inputs: [img]
    data_loader:
      num_workers: 0
      batch_size: 8
  # common
  data_params:
    input_size: [192, 256] # w,h
    input_channels: 3

model:
  type: reid_model.topdown
  backbone:
    type: resnets16
    depth: 50
    in_channels: $data.data_params.input_channels
  head:
    type: reid_head_v3
    dropout: 0.1
    feature_extractor:
      type: straightthrough_feature_extractor
      name: straightthrough_extractor
      abbr: se
      out_channels: 128
      out_activation: null
  recon_head:
    type: reid_recon_head
    output_size: [256, 192] # h,w
    generator:
      out_acti_cfg:
        type: sigmoid_ms
        mean: [0.485, 0.456, 0.406]
        std: [0.229, 0.224, 0.225]
        gain: 0.1
  loss:
    type: reid_loss_v3
    cls_loss:
      type: classification_v3
      n_classes: $data.train.data_params.n_classes
      enable_temperature: true
      label_smoothing: 0.
      intra_relax: 0.3
      inter_relax: 0.
      margin: 0.1
      abs_cls_weight: 1.
      rel_cls_weight: 1.
      radial_weight: 1.
      centroid_weight: 1.
      loss_weight: 0.1
    ml_loss:
      type: metriclearning_v2
      margin_pos: 0.3
      margin_neg: 0.3
      margin_tri: 0.3
      pos_weight: 1.
      neg_weight: 1.
      tri_weight: 3.
      loss_weight: 3.
  recon_loss:
    type: reid_recon_loss
    l1_recon_loss:
      type: l1_recon
      use_salience_map: false
      salience_alpha: 1.
      loss_weight: 1.
    gan_recon_loss:
      type: gan_recon
      out_activation: tanh
      out_scaling: false
      dropout: 0.1
      dropout_ref: 0.1
      use_dynamic_dropout_ref: false
      gan_loss_type: vanilla
      loss_weight: 1.
    loss_weight: 0.0 ########
  accuracy:
    type: reid_postprocessor.accuracy_v3
    distance: l2
  predict:
    type: reid_postprocessor.predict
  eval_cfg:
    return_all_features: true

complex_train:
  stations:
    # station 1
    - name: train_st
      threads:
        # thread 1-1 (with l1 recon only) ==========================================
        - name: train_with_recon1_th
          data: train_with_recon
          start_outer_round: 1
          # end_outer_round: 3 ##############
          max_inner_steps: 500 # ends at step 1000
          max_steps: 7000
          global_vars: [step]
          terminate_inner_loop_when_closed: true
          will_terminate_outer_loop_when_finished: true ##########
          train_step_kwargs:
            apply_l1_recon: true
            apply_gan_recon: false
          optim:
            module: [backbone, head, recon_head, loss]
            optimizer:
              type: adam
              lr: 0.0005
            lr_scheduler:
              type: step_lr
              by_epoch: false
              step: [4000, 5000, 6000]
              gamma: 0.3
              warmup: linear
              warmup_ratio: 0.01
              warmup_steps: 500
            optim_scheduler:
              type: optim
          summarize:
            interval: 50
        # thread 1-2 (train gan discriminator) ==========================================
        # - name: train_discriminator_th
        #   data: train_with_recon
        #   disable: true ##############
        #   start_outer_round: 2 # ends at step 4500
        #   inner_round_interval: 1
        #   train_step_kwargs:
        #     train_discriminator: true
        #   optim:
        #     module: [recon_loss]
        #     optimizer:
        #       type: adam
        #       lr: 0.0005
        #     lr_scheduler:
        #       type: step_lr
        #       by_epoch: false
        #       step: [2500, 3500, 4000]
        #       gamma: 0.3
        #       warmup: linear
        #       warmup_ratio: 0.01
        #       warmup_steps: 200
        #     optim_scheduler:
        #       type: optim
        #   summarize:
        #     interval: 50
        # thread 1-3 (with l1 recon and gan recon) ==========================================
        # - name: train_with_recon2_th
        #   data: train_with_recon
        #   disable: true ##############
        #   start_outer_round: 3
        #   max_inner_steps: 500
        #   max_steps: 5000 # ends at step 5000
        #   start_step: 1000
        #   global_vars: [step]
        #   terminate_inner_loop_when_closed: true
        #   will_terminate_outer_loop_when_finished: true
        #   train_step_kwargs:
        #     apply_l1_recon: true
        #     apply_gan_recon: true
        #   optim:
        #     module: [backbone, head, recon_head, loss]
        #     optimizer:
        #       type: adam
        #       lr: 0.0005
        #     lr_scheduler:
        #       type: step_lr
        #       by_epoch: false
        #       step: [3000, 4000, 4500]
        #       gamma: 0.3
        #       warmup: linear
        #       warmup_ratio: 0.01
        #       warmup_steps: 200
        #     optim_scheduler:
        #       type: optim
        #   summarize:
        #     interval: 50
    # station 2
    - name: validate_st
      threads:
        # thread 2-1 ==========================================
        - name: validate_th
          mode: val
          data: val
          max_inner_epochs: 1
          progressbar_unit: item
          val_step_kwargs:
            return_recon: true
          validate:
            save_best_by: output_map
            metric_greater_better: true
            save_prefix: val_
            evaluate_begin_kwargs:
              show_recon_num: 10
    # station 3
    - name: validate_transfer_st
      threads:
        # thread 3-1 ==========================================
        - name: validate_transfer_th
          mode: val
          data: val_transfer
          max_inner_epochs: 1
          progressbar_unit: item
          val_step_kwargs:
            return_recon: true
          validate:
            save_best_by: output_map
            metric_greater_better: true
            save_prefix: val_transfer_
            evaluate_begin_kwargs:
              show_recon_num: 10
