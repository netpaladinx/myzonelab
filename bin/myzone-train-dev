#!/usr/bin/env python
import os.path as osp
import argparse
import json

from myzonecv.apis import get_config_file, Config, train


DATAZOO_DIR = './workspace/data_zoo/trainval'
MODELZOO_DIR = './workspace/model_zoo'
EXPERIMENTS_DIR = './workspace/experiments'


def get_data_source(path):
    if osp.isdir(path):
        img_dir = osp.join(path, 'images')
        ann_file = osp.join(path, 'annotations.json')
        assert osp.isdir(img_dir), f"img_dir '{img_dir}' not found"
        assert osp.isfile(ann_file), f"ann_file '{ann_file}' not found"
    elif osp.isfile(path):
        img_dir, ann_file = [], []
        with open(path) as fin:
            for line in fin.readlines():
                line = line.strip()
                pa_dir = osp.dirname(path)
                img_d = osp.join(pa_dir, line, 'images')
                ann_f = osp.join(pa_dir, line, 'annotations.json')
                assert osp.isdir(img_dir), f"img_dir '{img_dir}' not found"
                assert osp.isfile(ann_file), f"ann_file '{ann_file}' not found"
                img_dir.append(img_d)
                ann_file.append(ann_f)
    else:
        raise FileNotFoundError(f"data source '{path}' not found")
    return img_dir, ann_file


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--experiment', type=str, required=True, help="experiment name")
    parser.add_argument('--timestamp', type=str, default=None)
    parser.add_argument('--config', type=str, default=None, help="config name or filepath")
    parser.add_argument('--extra-conf-path', type=str, default=None, help="extra config filepath")
    parser.add_argument('--extra-conf-str', type=str, default=None, help="extra config jsonstr")
    parser.add_argument('--train-data', type=str, default=None, help="train data name")
    parser.add_argument('--val-data', type=str, default=None, help="val data name")
    parser.add_argument('--split-train-val', action='store_true')
    parser.add_argument('--split-ratio', type=float, default=9)
    parser.add_argument('--pretrained', type=str, default=None)
    parser.add_argument('--pretrained-src-prefix', type=str, default=None)
    parser.add_argument('--pretrained-dst-prefix', type=str, default=None)
    parser.add_argument('--use-diagnosis', action='store_true')
    args = parser.parse_args()

    kwargs = {}
    kwargs['work_dir'] = osp.join(EXPERIMENTS_DIR, args.experiment)
    kwargs['timestamp'] = args.timestamp

    config = get_config_file(args.config)

    path = args.extra_conf_path
    if path and osp.isfile(path):
        extra_config = Config.from_file(path)
        kwargs.update(extra_config.to_dict())

    jsonstr = args.extra_conf_str
    if jsonstr:
        try:
            kwargs.update(json.loads(jsonstr))
        except Exception as e:
            print(e)
            pass

    assert args.train_data is not None
    img_dir, ann_file = get_data_source(osp.join(DATAZOO_DIR, args.train_data))
    if args.split_train_val:
        assert args.split_ratio > 0
        kwargs['data'] = {
            'data_source': {
                'ann_file': ann_file,
                'img_dir': img_dir,
                'drop_prob': 1. / args.split_ratio
            }
        }
    else:
        assert args.val_data is not None
        val_img_dir, val_ann_file = get_data_source(osp.join(DATAZOO_DIR, args.val_data))
        kwargs['data'] = {
            'train.data_source': {
                'ann_file': ann_file,
                'img_dir': img_dir
            },
            'val.data_source': {
                'ann_file': val_ann_file,
                'img_dir': val_img_dir
            }
        }

    if args.pretrained:
        path = osp.join(MODELZOO_DIR, args.pretrained)
        assert osp.isfile(path)
        kwargs['model.init_cfg'] = {
            'type': 'pretrained',
            'path': path,
            'src_prefix': args.pretrained_src_prefix,
            'dst_prefix': args.pretrained_dst_prefix
        }

    kwargs['use_diagnosis'] = args.use_diagnosis

    train(config, **kwargs)


if __name__ == '__main__':
    main()
